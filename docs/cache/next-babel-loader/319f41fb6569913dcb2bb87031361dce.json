{"ast":null,"code":"export default (conf => {\n  // console.log('MD conf: ', conf);\n  const tempLinkAttrConf = {\n    attrs: {\n      target: '_blank',\n      rel: 'noopener'\n    }\n  };\n\n  function linkAttributeOptions(opts = '') {\n    // console.log('linkAttributeOptions opts: ', opts);\n    return opts.map(o => {\n      if (o['use-pattern']) {\n        return {\n          pattern: o.pattern,\n          attr: o.attr\n        };\n      } else {\n        return {\n          attr: o.attr\n        };\n      }\n    });\n  }\n\n  function markDownItOptions(opts) {\n    // console.log('markDownItOptions opts: ', opts);\n    return {\n      html: opts['parse-html'],\n      // Enable HTML tags in source\n      xhtmlOut: opts['close-single-tag'],\n      // Use '/' to close single tags (<br />).\n      // This is only for full CommonMark compatibility.\n      breaks: opts['break-tag-linebreaks'],\n      // Convert '\\n' in paragraphs into <br>\n      langPrefix: 'language-',\n      // CSS language prefix for fenced blocks. Can be\n      // useful for external highlighters.\n      linkify: opts['all-links'],\n      // Autoconvert URL-like text to links\n      // Enable some language-neutral replacement + quotes beautification\n      typographer: opts[\"typographer\"],\n      // Double + single quotes replacement pairs, when typographer enabled,\n      // and smartquotes on. Could be either a String or an Array.\n      //\n      // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n      // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n      quotes: '“”‘’',\n      // Highlighter function. Should return escaped HTML,\n      // or '' if the source string is not changed and should be escaped externally.\n      // If result starts with <pre... internal wrapper is skipped.\n      highlight: function ()\n      /*str, lang*/\n      {\n        return '';\n      }\n    };\n  }\n\n  return {\n    markDownItOptions: markDownItOptions(conf),\n    linkAttributeOptions: linkAttributeOptions(conf.link_attributes)\n  };\n});","map":{"version":3,"sources":["/Users/cliff/git/next-app-pre-configured-starter/src/components/core/markdown/_md-opts.js"],"names":["conf","tempLinkAttrConf","attrs","target","rel","linkAttributeOptions","opts","map","o","pattern","attr","markDownItOptions","html","xhtmlOut","breaks","langPrefix","linkify","typographer","quotes","highlight","link_attributes"],"mappings":"AAAA,gBAAgBA,IAAD,IAAU;AACrB;AAEA,QAAMC,gBAAgB,GAAG;AACrBC,IAAAA,KAAK,EAAE;AACHC,MAAAA,MAAM,EAAE,QADL;AAEHC,MAAAA,GAAG,EAAE;AAFF;AADc,GAAzB;;AAOA,WAASC,oBAAT,CAA8BC,IAAI,GAAG,EAArC,EAAyC;AAErC;AACA,WAAOA,IAAI,CAACC,GAAL,CAASC,CAAC,IAAI;AACjB,UAAIA,CAAC,CAAC,aAAD,CAAL,EAAsB;AAClB,eAAO;AACHC,UAAAA,OAAO,EAAED,CAAC,CAACC,OADR;AAEHC,UAAAA,IAAI,EAAEF,CAAC,CAACE;AAFL,SAAP;AAIH,OALD,MAKO;AACH,eAAO;AAAEA,UAAAA,IAAI,EAAEF,CAAC,CAACE;AAAV,SAAP;AACH;AACJ,KATM,CAAP;AAUH;;AAGD,WAASC,iBAAT,CAA2BL,IAA3B,EAAiC;AAC7B;AAEA,WAAO;AACHM,MAAAA,IAAI,EAAEN,IAAI,CAAC,YAAD,CADP;AAC8B;AACjCO,MAAAA,QAAQ,EAAEP,IAAI,CAAC,kBAAD,CAFX;AAEwC;AAC3C;AACAQ,MAAAA,MAAM,EAAER,IAAI,CAAC,sBAAD,CAJT;AAI0C;AAC7CS,MAAAA,UAAU,EAAE,WALT;AAKuB;AAC1B;AACAC,MAAAA,OAAO,EAAEV,IAAI,CAAC,WAAD,CAPV;AAOgC;AAEnC;AACAW,MAAAA,WAAW,EAAEX,IAAI,CAAC,aAAD,CAVd;AAYH;AACA;AACA;AACA;AACA;AACAY,MAAAA,MAAM,EAAE,MAjBL;AAmBH;AACA;AACA;AACAC,MAAAA,SAAS,EAAE;AAAU;AAAe;AAAE,eAAO,EAAP;AAAY;AAtB/C,KAAP;AAwBH;;AAED,SAAO;AACHR,IAAAA,iBAAiB,EAAEA,iBAAiB,CAACX,IAAD,CADjC;AAEHK,IAAAA,oBAAoB,EAAEA,oBAAoB,CAACL,IAAI,CAACoB,eAAN;AAFvC,GAAP;AAKH,CA5DD","sourcesContent":["export default (conf) => {\n    // console.log('MD conf: ', conf);\n\n    const tempLinkAttrConf = {\n        attrs: {\n            target: '_blank',\n            rel: 'noopener'\n        }\n    }\n\n    function linkAttributeOptions(opts = '') {\n\n        // console.log('linkAttributeOptions opts: ', opts);\n        return opts.map(o => {\n            if (o['use-pattern']) {\n                return {\n                    pattern: o.pattern,\n                    attr: o.attr\n                }\n            } else {\n                return { attr: o.attr };\n            }\n        })\n    }\n\n\n    function markDownItOptions(opts) {\n        // console.log('markDownItOptions opts: ', opts);\n\n        return {\n            html: opts['parse-html'],        // Enable HTML tags in source\n            xhtmlOut: opts['close-single-tag'],        // Use '/' to close single tags (<br />).\n            // This is only for full CommonMark compatibility.\n            breaks: opts['break-tag-linebreaks'],        // Convert '\\n' in paragraphs into <br>\n            langPrefix: 'language-',  // CSS language prefix for fenced blocks. Can be\n            // useful for external highlighters.\n            linkify: opts['all-links'],        // Autoconvert URL-like text to links\n\n            // Enable some language-neutral replacement + quotes beautification\n            typographer: opts[\"typographer\"],\n\n            // Double + single quotes replacement pairs, when typographer enabled,\n            // and smartquotes on. Could be either a String or an Array.\n            //\n            // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n            // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n            quotes: '“”‘’',\n\n            // Highlighter function. Should return escaped HTML,\n            // or '' if the source string is not changed and should be escaped externally.\n            // If result starts with <pre... internal wrapper is skipped.\n            highlight: function (/*str, lang*/) { return ''; }\n        }\n    }\n\n    return {\n        markDownItOptions: markDownItOptions(conf),\n        linkAttributeOptions: linkAttributeOptions(conf.link_attributes)\n    };\n\n}"]},"metadata":{},"sourceType":"module"}