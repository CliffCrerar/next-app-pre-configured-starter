{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\n/**\n * MAIN Markdown component\n */\nimport React, { Component, Fragment } from 'react';\nimport handelError from './_http-error';\n\nclass MarkdownFileReaderComponent extends Component {\n  /* CLASS CONSTRUCTOR */\n  constructor(props) {\n    super(props); // Set initial state\n\n    _defineProperty(this, \"componentDidMount\", () => this.httpGetMdFile(this.query, this.handleHttpGetMdFile));\n\n    _defineProperty(this, \"convertToMarkdown\", this.props.getMarkDownIt(this.props.config));\n\n    _defineProperty(this, \"convertToReact\", this.props.htmlToReact.parse);\n\n    _defineProperty(this, \"httpGetMdFile\", this.props.httpGetMdFile);\n\n    _defineProperty(this, \"throwError\", this.props.throwError);\n\n    _defineProperty(this, \"query\", this.props.children);\n\n    _defineProperty(this, \"handleHttpGetMdFile\", response => response.blob().then(blob => blob.text().then(body => {\n      this.changeState(body, response);\n    })));\n\n    _defineProperty(this, \"changeState\", (body, response) => response.ok // is response an error ?\n    ? this.setState({\n      md: this.convert(body)\n    }) // is not an error\n    : this.setState({\n      md: this.throwError(response.status, response.statusText, body)\n    }));\n\n    _defineProperty(this, \"convert\", mdText => this.convertToReact(this.convertToMarkdown.render(mdText)));\n\n    _defineProperty(this, \"render\", () => __jsx(Fragment, null, this.state.md));\n\n    this.state = {\n      md: this.convert('# Loading content . . .')\n    };\n  } // life cycle hooks\n\n\n} // Set property types\n\n\nMarkdownFileReaderComponent.defaultProps = {\n  httpGetMdFile: require('./_http-get-md'),\n  getMarkDownIt: require('./_md-it'),\n  config: require('config').markdown_config,\n  throwError: handelError,\n  htmlToReact: require('./_html-to-react')\n};\nexport default MarkdownFileReaderComponent;","map":{"version":3,"sources":["/Users/cliff/git/next-app-pre-configured-starter/src/components/core/markdown/main.js"],"names":["React","Component","Fragment","handelError","MarkdownFileReaderComponent","constructor","props","httpGetMdFile","query","handleHttpGetMdFile","getMarkDownIt","config","htmlToReact","parse","throwError","children","response","blob","then","text","body","changeState","ok","setState","md","convert","status","statusText","mdText","convertToReact","convertToMarkdown","render","state","defaultProps","require","markdown_config"],"mappings":";;;AAAA;;;AAGA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;AACA,MAAMC,2BAAN,SAA0CH,SAA1C,CAAoD;AACnD;AACAI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN,EADkB,CAElB;;AAFkB,+CAMC,MAAM,KAAKC,aAAL,CAAmB,KAAKC,KAAxB,EAA+B,KAAKC,mBAApC,CANP;;AAAA,+CAQC,KAAKH,KAAL,CAAWI,aAAX,CAAyB,KAAKJ,KAAL,CAAWK,MAApC,CARD;;AAAA,4CASF,KAAKL,KAAL,CAAWM,WAAX,CAAuBC,KATrB;;AAAA,2CAUH,KAAKP,KAAL,CAAWC,aAVR;;AAAA,wCAWN,KAAKD,KAAL,CAAWQ,UAXL;;AAAA,mCAYX,KAAKR,KAAL,CAAWS,QAZA;;AAAA,iDAcGC,QAAQ,IAC7BA,QAAQ,CAACC,IAAT,GAAgBC,IAAhB,CAAqBD,IAAI,IAAIA,IAAI,CAACE,IAAL,GAAYD,IAAZ,CAAiBE,IAAI,IAAI;AAAE,WAAKC,WAAL,CAAiBD,IAAjB,EAAuBJ,QAAvB;AAAkC,KAA7D,CAA7B,CAfkB;;AAAA,yCAiBL,CAACI,IAAD,EAAOJ,QAAP,KAAoBA,QAAQ,CAACM,EAAT,CAAY;AAAZ,MAC/B,KAAKC,QAAL,CAAc;AAAEC,MAAAA,EAAE,EAAE,KAAKC,OAAL,CAAaL,IAAb;AAAN,KAAd,CAD+B,CACW;AADX,MAE/B,KAAKG,QAAL,CAAc;AAAEC,MAAAA,EAAE,EAAE,KAAKV,UAAL,CAAgBE,QAAQ,CAACU,MAAzB,EAAiCV,QAAQ,CAACW,UAA1C,EAAsDP,IAAtD;AAAN,KAAd,CAnBgB;;AAAA,qCAqBTQ,MAAM,IAAI,KAAKC,cAAL,CAAoB,KAAKC,iBAAL,CAAuBC,MAAvB,CAA8BH,MAA9B,CAApB,CArBD;;AAAA,oCAuBV,MAAM,MAAC,QAAD,QAAW,KAAKI,KAAL,CAAWR,EAAtB,CAvBI;;AAGlB,SAAKQ,KAAL,GAAa;AAAER,MAAAA,EAAE,EAAE,KAAKC,OAAL,CAAa,yBAAb;AAAN,KAAb;AACA,GANkD,CAOnD;;;AAPmD,C,CA4BpD;;;AAUArB,2BAA2B,CAAC6B,YAA5B,GAA2C;AAC1C1B,EAAAA,aAAa,EAAE2B,OAAO,CAAC,gBAAD,CADoB;AAE1CxB,EAAAA,aAAa,EAAEwB,OAAO,CAAC,UAAD,CAFoB;AAG1CvB,EAAAA,MAAM,EAAEuB,OAAO,CAAC,QAAD,CAAP,CAAkBC,eAHgB;AAI1CrB,EAAAA,UAAU,EAAEX,WAJ8B;AAK1CS,EAAAA,WAAW,EAAEsB,OAAO,CAAC,kBAAD;AALsB,CAA3C;AAQA,eAAe9B,2BAAf","sourcesContent":["/**\n * MAIN Markdown component\n */\nimport React, { Component, Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport handelError from './_http-error'\nclass MarkdownFileReaderComponent extends Component {\n\t/* CLASS CONSTRUCTOR */\n\tconstructor(props) {\n\t\tsuper(props)\n\t\t// Set initial state\n\t\tthis.state = { md: this.convert('# Loading content . . .') }\n\t}\n\t// life cycle hooks\n\tcomponentDidMount = () => this.httpGetMdFile(this.query, this.handleHttpGetMdFile);\n\t// Define class variables\n\tconvertToMarkdown = this.props.getMarkDownIt(this.props.config); // converts to markdown\n\tconvertToReact = this.props.htmlToReact.parse // converts to react\n\thttpGetMdFile = this.props.httpGetMdFile; // http get request function\n\tthrowError = this.props.throwError; // http error function\n\tquery = this.props.children; // the file that must be called\n\t// Handle the markdown file response from the API\n\thandleHttpGetMdFile = response =>\n\t\tresponse.blob().then(blob => blob.text().then(body => { this.changeState(body, response) }));\n\t// Handle the change state from http call\n\tchangeState = (body, response) => response.ok // is response an error ?\n\t\t? this.setState({ md: this.convert(body) }) // is not an error\n\t\t: this.setState({ md: this.throwError(response.status, response.statusText, body) }); // is an error\n\t// function that converts to html then to react\n\tconvert = mdText => this.convertToReact(this.convertToMarkdown.render(mdText));\n\t// Render component\n\trender = () => <Fragment>{this.state.md}</Fragment>\n}\n\n// Set property types\nMarkdownFileReaderComponent.propTypes = {\n\tquery: propTypes.string, // the the filename that will be called\n\tconfig: propTypes.object, // the markdown config\n\thttpGetMdFile: propTypes.func, // the function that calls the file\n\tgetMarkDownIt: propTypes.func, // the function that converts markdown to html\n\tthrowError: propTypes.func, // the function that creates error responses\n\thtmlToReact: propTypes.object // the function that converts html to react\n}\n\nMarkdownFileReaderComponent.defaultProps = {\n\thttpGetMdFile: require('./_http-get-md'),\n\tgetMarkDownIt: require('./_md-it'),\n\tconfig: require('config').markdown_config,\n\tthrowError: handelError,\n\thtmlToReact: require('./_html-to-react')\n}\n\nexport default MarkdownFileReaderComponent;\n\n\n\n"]},"metadata":{},"sourceType":"module"}