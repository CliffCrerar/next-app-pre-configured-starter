{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\n/**\n * MAIN Markdown component\n */\nimport React, { Component, Fragment } from 'react';\nimport handelError from './_http-error';\n\nvar MarkdownFileReaderComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MarkdownFileReaderComponent, _Component);\n\n  /* CLASS CONSTRUCTOR */\n  function MarkdownFileReaderComponent(props) {\n    var _this;\n\n    _classCallCheck(this, MarkdownFileReaderComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MarkdownFileReaderComponent).call(this, props)); // Set initial state\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      return _this.httpGetMdFile(_this.query, _this.handleHttpGetMdFile);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"convertToMarkdown\", _this.props.getMarkDownIt(_this.props.config));\n\n    _defineProperty(_assertThisInitialized(_this), \"convertToReact\", _this.props.htmlToReact.parse);\n\n    _defineProperty(_assertThisInitialized(_this), \"httpGetMdFile\", _this.props.httpGetMdFile);\n\n    _defineProperty(_assertThisInitialized(_this), \"throwError\", _this.props.throwError);\n\n    _defineProperty(_assertThisInitialized(_this), \"query\", _this.props.children);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHttpGetMdFile\", function (response) {\n      return response.blob().then(function (blob) {\n        return blob.text().then(function (body) {\n          _this.changeState(body, response);\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeState\", function (body, response) {\n      return response.ok // is response an error ?\n      ? _this.setState({\n        md: _this.convert(body)\n      }) // is not an error\n      : _this.setState({\n        md: _this.throwError(response.status, response.statusText, body)\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"convert\", function (mdText) {\n      return _this.convertToReact(_this.convertToMarkdown.render(mdText));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"render\", function () {\n      return __jsx(Fragment, null, _this.state.md);\n    });\n\n    _this.state = {\n      md: _this.convert('# Loading content . . .')\n    };\n    return _this;\n  } // life cycle hooks\n\n\n  return MarkdownFileReaderComponent;\n}(Component); // Set property types\n\n\nMarkdownFileReaderComponent.defaultProps = {\n  httpGetMdFile: require('./_http-get-md'),\n  getMarkDownIt: require('./_md-it'),\n  config: require('config').markdown_config,\n  throwError: handelError,\n  htmlToReact: require('./_html-to-react')\n};\nexport default MarkdownFileReaderComponent;","map":{"version":3,"sources":["/Users/cliff/git/next-app-pre-configured-starter/src/components/core/markdown/main.js"],"names":["React","Component","Fragment","handelError","MarkdownFileReaderComponent","props","httpGetMdFile","query","handleHttpGetMdFile","getMarkDownIt","config","htmlToReact","parse","throwError","children","response","blob","then","text","body","changeState","ok","setState","md","convert","status","statusText","mdText","convertToReact","convertToMarkdown","render","state","defaultProps","require","markdown_config"],"mappings":";;;;;;;;AAAA;;;AAGA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;IACMC,2B;;;;;AACL;AACA,uCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,qGAAMA,KAAN,GADkB,CAElB;;AAFkB,wEAMC;AAAA,aAAM,MAAKC,aAAL,CAAmB,MAAKC,KAAxB,EAA+B,MAAKC,mBAApC,CAAN;AAAA,KAND;;AAAA,wEAQC,MAAKH,KAAL,CAAWI,aAAX,CAAyB,MAAKJ,KAAL,CAAWK,MAApC,CARD;;AAAA,qEASF,MAAKL,KAAL,CAAWM,WAAX,CAAuBC,KATrB;;AAAA,oEAUH,MAAKP,KAAL,CAAWC,aAVR;;AAAA,iEAWN,MAAKD,KAAL,CAAWQ,UAXL;;AAAA,4DAYX,MAAKR,KAAL,CAAWS,QAZA;;AAAA,0EAcG,UAAAC,QAAQ;AAAA,aAC7BA,QAAQ,CAACC,IAAT,GAAgBC,IAAhB,CAAqB,UAAAD,IAAI;AAAA,eAAIA,IAAI,CAACE,IAAL,GAAYD,IAAZ,CAAiB,UAAAE,IAAI,EAAI;AAAE,gBAAKC,WAAL,CAAiBD,IAAjB,EAAuBJ,QAAvB;AAAkC,SAA7D,CAAJ;AAAA,OAAzB,CAD6B;AAAA,KAdX;;AAAA,kEAiBL,UAACI,IAAD,EAAOJ,QAAP;AAAA,aAAoBA,QAAQ,CAACM,EAAT,CAAY;AAAZ,QAC/B,MAAKC,QAAL,CAAc;AAAEC,QAAAA,EAAE,EAAE,MAAKC,OAAL,CAAaL,IAAb;AAAN,OAAd,CAD+B,CACW;AADX,QAE/B,MAAKG,QAAL,CAAc;AAAEC,QAAAA,EAAE,EAAE,MAAKV,UAAL,CAAgBE,QAAQ,CAACU,MAAzB,EAAiCV,QAAQ,CAACW,UAA1C,EAAsDP,IAAtD;AAAN,OAAd,CAFW;AAAA,KAjBK;;AAAA,8DAqBT,UAAAQ,MAAM;AAAA,aAAI,MAAKC,cAAL,CAAoB,MAAKC,iBAAL,CAAuBC,MAAvB,CAA8BH,MAA9B,CAApB,CAAJ;AAAA,KArBG;;AAAA,6DAuBV;AAAA,aAAM,MAAC,QAAD,QAAW,MAAKI,KAAL,CAAWR,EAAtB,CAAN;AAAA,KAvBU;;AAGlB,UAAKQ,KAAL,GAAa;AAAER,MAAAA,EAAE,EAAE,MAAKC,OAAL,CAAa,yBAAb;AAAN,KAAb;AAHkB;AAIlB,G,CACD;;;;EAPyCvB,S,GA4B1C;;;AAUAG,2BAA2B,CAAC4B,YAA5B,GAA2C;AAC1C1B,EAAAA,aAAa,EAAE2B,OAAO,CAAC,gBAAD,CADoB;AAE1CxB,EAAAA,aAAa,EAAEwB,OAAO,CAAC,UAAD,CAFoB;AAG1CvB,EAAAA,MAAM,EAAEuB,OAAO,CAAC,QAAD,CAAP,CAAkBC,eAHgB;AAI1CrB,EAAAA,UAAU,EAAEV,WAJ8B;AAK1CQ,EAAAA,WAAW,EAAEsB,OAAO,CAAC,kBAAD;AALsB,CAA3C;AAQA,eAAe7B,2BAAf","sourcesContent":["/**\n * MAIN Markdown component\n */\nimport React, { Component, Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport handelError from './_http-error'\nclass MarkdownFileReaderComponent extends Component {\n\t/* CLASS CONSTRUCTOR */\n\tconstructor(props) {\n\t\tsuper(props)\n\t\t// Set initial state\n\t\tthis.state = { md: this.convert('# Loading content . . .') }\n\t}\n\t// life cycle hooks\n\tcomponentDidMount = () => this.httpGetMdFile(this.query, this.handleHttpGetMdFile);\n\t// Define class variables\n\tconvertToMarkdown = this.props.getMarkDownIt(this.props.config); // converts to markdown\n\tconvertToReact = this.props.htmlToReact.parse // converts to react\n\thttpGetMdFile = this.props.httpGetMdFile; // http get request function\n\tthrowError = this.props.throwError; // http error function\n\tquery = this.props.children; // the file that must be called\n\t// Handle the markdown file response from the API\n\thandleHttpGetMdFile = response =>\n\t\tresponse.blob().then(blob => blob.text().then(body => { this.changeState(body, response) }));\n\t// Handle the change state from http call\n\tchangeState = (body, response) => response.ok // is response an error ?\n\t\t? this.setState({ md: this.convert(body) }) // is not an error\n\t\t: this.setState({ md: this.throwError(response.status, response.statusText, body) }); // is an error\n\t// function that converts to html then to react\n\tconvert = mdText => this.convertToReact(this.convertToMarkdown.render(mdText));\n\t// Render component\n\trender = () => <Fragment>{this.state.md}</Fragment>\n}\n\n// Set property types\nMarkdownFileReaderComponent.propTypes = {\n\tquery: propTypes.string, // the the filename that will be called\n\tconfig: propTypes.object, // the markdown config\n\thttpGetMdFile: propTypes.func, // the function that calls the file\n\tgetMarkDownIt: propTypes.func, // the function that converts markdown to html\n\tthrowError: propTypes.func, // the function that creates error responses\n\thtmlToReact: propTypes.object // the function that converts html to react\n}\n\nMarkdownFileReaderComponent.defaultProps = {\n\thttpGetMdFile: require('./_http-get-md'),\n\tgetMarkDownIt: require('./_md-it'),\n\tconfig: require('config').markdown_config,\n\tthrowError: handelError,\n\thtmlToReact: require('./_html-to-react')\n}\n\nexport default MarkdownFileReaderComponent;\n\n\n\n"]},"metadata":{},"sourceType":"module"}