{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport App from 'next/app';\nimport Layout from 'layout';\nimport AppHead from 'head';\nimport PropTypes from 'prop-types';\nimport { confJSON } from '../config';\nimport { Router } from 'next/router';\nimport 'global.scss'; // console.log('confJSON: ', confJSON);\n\nclass NextApp extends App {\n  // Only uncomment this method if you have blocking data requirements for\n  // every single page in your application. This disables the ability to\n  // perform automatic static optimization, causing every page in your app to\n  // be server-side rendered.\n  //\n  // static async getInitialProps(appContext) {\n  // calls page's `getInitialProps` and fills `appProps.pageProps`\n  // \tconst appProps = await App.getInitialProps(appContext);\n  // console.log('_app appProps: ', appProps);\n  // \treturn { ...appProps }\n  // }\n  constructor(props) {\n    super(props); // console.log('_app props: ', props);\n    // console.log('AppHead: ', <AppHead/>);\n  } // WHEN COMPONENT HAS MOUNTED\n\n\n  componentDidMount() {\n    this.props.showAppMount && console.log('APP DID MOUNT');\n    this.displayBodyText();\n    this.getScripts(); // this.getTitle();\n  } // WHEN COMPONENT UPDATES\n\n\n  componentDidUpdate() {\n    this.props.showAppUpdate && console.log('APP DID UPDATE'); // this.getTitle()\n  }\n\n  componentDidCatch() {\n    console.log('this.props.err: ', this.props.err);\n  } // DEV TOOL\n\n\n  displayBodyText() {\n    if (this.props.config.app_config.displayBodyText) {\n      const divEl = document.createElement('div');\n      divEl.innerHTML = `<h1 style=\"position: absolute; top: 50%\">Body</h1>`;\n      document.body.prepend(divEl);\n    }\n  }\n\n  getScripts() {\n    // console.log(confJSON.app_config.scripts);\n    confJSON.app_config.scripts.forEach(script => require('scripts/' + script));\n  } // Get the app title from the route and the links in the config file\n\n\n  getTitles() {\n    const links = this.props.config.layout_config.nav.links,\n          route = this.props.router.route,\n          {\n      title,\n      subTitle,\n      subTitleText\n    } = links.filter(link => link.href === route)[0],\n          sTitle = subTitle ? subTitleText : null;\n    return {\n      title,\n      subTitle: sTitle\n    };\n  }\n\n  render() {\n    // console.log('APP PROPS',this.props);\n    let {\n      Component,\n      pageProps,\n      config\n    } = this.props;\n    const appConf = config.app_config,\n          layoutConf = config.layout_config;\n    pageProps.conf = config;\n\n    const AppComponents = () => __jsx(React.Fragment, null, __jsx(AppHead, appConf), __jsx(Layout, _extends({}, layoutConf, appConf), __jsx(Component, pageProps)));\n\n    try {\n      appConf.titles = this.getTitles();\n      appConf.error = {\n        message: null,\n        stack: null\n      };\n      return __jsx(AppComponents, null);\n    } catch (err) {\n      appConf.titles = {\n        title: \"ERROR\",\n        subTitle: null\n      };\n      appConf.error = {\n        message: err.message,\n        stack: err.stack\n      };\n      return __jsx(AppComponents, null);\n    }\n  }\n\n} // Define prop types\n\n\nNextApp.propTypes = {\n  config: PropTypes.object,\n  router: PropTypes.object,\n  showAppMount: PropTypes.bool,\n  showAppUpdate: PropTypes.bool\n}; // Define default props\n\nNextApp.defaultProps = {\n  config: confJSON,\n  router: Router,\n  showAppMount: confJSON['dev-config'].display_App_component_mount,\n  showAppUpdate: confJSON['dev-config'].display_App_component_update\n};\nexport default NextApp;","map":{"version":3,"sources":["/Users/cliff/git/next-app-pre-configured-starter/src/pages/_app.js"],"names":["React","App","Layout","AppHead","PropTypes","confJSON","Router","NextApp","constructor","props","componentDidMount","showAppMount","console","log","displayBodyText","getScripts","componentDidUpdate","showAppUpdate","componentDidCatch","err","config","app_config","divEl","document","createElement","innerHTML","body","prepend","scripts","forEach","script","require","getTitles","links","layout_config","nav","route","router","title","subTitle","subTitleText","filter","link","href","sTitle","render","Component","pageProps","appConf","layoutConf","conf","AppComponents","titles","error","message","stack","propTypes","object","bool","defaultProps","display_App_component_mount","display_App_component_update"],"mappings":"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","sourcesContent":["import React from 'react';\nimport App from 'next/app';\nimport Layout from 'layout';\nimport AppHead from 'head';\nimport PropTypes from 'prop-types'\nimport { confJSON } from '../config';\nimport { Router } from 'next/router';\nimport 'global.scss'\n// console.log('confJSON: ', confJSON);\n\nclass NextApp extends App {\n\t// Only uncomment this method if you have blocking data requirements for\n\t// every single page in your application. This disables the ability to\n\t// perform automatic static optimization, causing every page in your app to\n\t// be server-side rendered.\n\t//\n\t// static async getInitialProps(appContext) {\n\t// calls page's `getInitialProps` and fills `appProps.pageProps`\n\t// \tconst appProps = await App.getInitialProps(appContext);\n\t// console.log('_app appProps: ', appProps);\n\t// \treturn { ...appProps }\n\t// }\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\t// console.log('_app props: ', props);\n\t\t// console.log('AppHead: ', <AppHead/>);\n\t}\n\n\t// WHEN COMPONENT HAS MOUNTED\n\tcomponentDidMount() {\n\t\tthis.props.showAppMount && console.log('APP DID MOUNT');\n\t\tthis.displayBodyText();\n\t\tthis.getScripts();\n\t\t// this.getTitle();\n\t}\n\n\t// WHEN COMPONENT UPDATES\n\tcomponentDidUpdate() {\n\t\tthis.props.showAppUpdate && console.log('APP DID UPDATE');\n\t\t// this.getTitle()\n\t}\n\n\tcomponentDidCatch() {\n\t\tconsole.log('this.props.err: ', this.props.err);\n\t}\n\n\t// DEV TOOL\n\tdisplayBodyText() {\n\t\tif (this.props.config.app_config.displayBodyText) {\n\t\t\tconst divEl = document.createElement('div')\n\t\t\tdivEl.innerHTML = `<h1 style=\"position: absolute; top: 50%\">Body</h1>`;\n\t\t\tdocument.body.prepend(divEl);\n\t\t}\n\t}\n\n\tgetScripts(){\n\t\t// console.log(confJSON.app_config.scripts);\n\t\tconfJSON.app_config.scripts.forEach(script=>require('scripts/'+script));\n\t}\n\n\t// Get the app title from the route and the links in the config file\n\tgetTitles() {\n\t\tconst\n\t\t\tlinks = this.props.config.layout_config.nav.links,\n\t\t\troute = this.props.router.route,\n\t\t\t{ title, subTitle, subTitleText } = links.filter(link => link.href === route)[0],\n\t\t\tsTitle = subTitle ? subTitleText : null\n\t\treturn { title, subTitle: sTitle }\n\t}\n\n\trender() {\n\n\t\t// console.log('APP PROPS',this.props);\n\t\tlet { Component, pageProps, config } = this.props;\n\t\tconst\n\t\t\tappConf = config.app_config,\n\t\t\tlayoutConf = config.layout_config;\n\t\tpageProps.conf = config;\n\t\tconst AppComponents = () => (\n\t\t\t<React.Fragment>\n\t\t\t\t<AppHead {...appConf} />\n\t\t\t\t<Layout {...layoutConf} {...appConf}>\n\t\t\t\t\t<Component {...pageProps} />\n\t\t\t\t</Layout>\n\t\t\t</React.Fragment>\n\t\t)\n\n\t\ttry {\n\t\t\tappConf.titles = this.getTitles();\n\t\t\tappConf.error = { message: null, stack: null };\n\t\t\treturn <AppComponents />\n\t\t} catch (err) {\n\t\t\tappConf.titles = { title:  \"ERROR\", subTitle: null };\n\t\t\tappConf.error = { message: err.message, stack: err.stack };\n\t\t\treturn <AppComponents />\n\t\t}\n\t}\n}\n// Define prop types\nNextApp.propTypes = {\n\tconfig: PropTypes.object,\n\trouter: PropTypes.object,\n\tshowAppMount: PropTypes.bool,\n\tshowAppUpdate: PropTypes.bool\n}\n// Define default props\nNextApp.defaultProps = {\n\tconfig: confJSON,\n\trouter: Router,\n\tshowAppMount: confJSON['dev-config'].display_App_component_mount,\n\tshowAppUpdate: confJSON['dev-config'].display_App_component_update,\n}\n\nexport default NextApp\n\n"]},"metadata":{},"sourceType":"module"}